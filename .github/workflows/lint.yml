name: Lint

on: [push, pull_request]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@main
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Download minimal cd image
      run: wget http://s2.jonnyh.net/pub/cd_minimal.iso.xz -O $GITHUB_WORKSPACE/data/cd.iso.xz
    
    - name: Extract minimal cd image
      run: xz -d $GITHUB_WORKSPACE/data/cd.iso.xz

    - name: Update apt-get repo
      run: sudo apt-get update

    - name: Install dependencies
      run: sudo apt-get install libsdl2-dev cmake build-essential git libunwind8-dev libboost-locale-dev libboost-filesystem-dev libboost-program-options-dev qtbase5-dev libvorbis-dev ninja-build clang-format-14 clang-tidy-14

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -GNinja -DCLANG_FORMAT=clang-format-14 -DCLANG_TIDY=clang-tidy-14

    - name: Setup Environment (PR)  
      if: ${{ github.event_name == 'pull_request' }}  
      shell: bash  
      run: |  
        echo "LAST_COMMIT_SHA=${{ github.event.pull_request.head.sha }}" >> ${GITHUB_ENV}  

    - name: Setup Environment (Push)  
      if: ${{ github.event_name == 'push' }}  
      shell: bash  
      run: |  
        echo "LAST_COMMIT_SHA=${{ github.event.after }}" >> ${GITHUB_ENV}

    - name: format lint
      working-directory: ${{runner.workspace}}
      shell: bash
      run: |
        cd $GITHUB_WORKSPACE
        if [[ -z "${{ github.event.before }}" ]]
        then
          echo '$GITHUB_WORKSPACE/tools/lint.sh ${{ github.event.before }}..${{ github.event.after }}'
          $GITHUB_WORKSPACE/tools/lint.sh ${{ github.event.before }}..${{ github.event.after }}
        else
          echo '$GITHUB_WORKSPACE/tools/lint.sh ${LAST_COMMIT_SHA}'
          $GITHUB_WORKSPACE/tools/lint.sh ${LAST_COMMIT_SHA}
        fi
        

    - name: clang-tidy lint
      working-directory: ${{runner.workspace}}
      shell: bash
      run: |
        cd $GITHUB_WORKSPACE
        if [[ -z "${{ github.event.before }}" ]]
        then
          echo 'CLANG_TIDY=clang-tidy-14 BUILD_DIR=${{runner.workspace}}/build $GITHUB_WORKSPACE/tools/lint-tidy.sh ${{ github.event.before }}..${{ github.event.after }} || true;'
          CLANG_TIDY=clang-tidy-14 BUILD_DIR=${{runner.workspace}}/build $GITHUB_WORKSPACE/tools/lint-tidy.sh ${{ github.event.before }}..${{ github.event.after }} || true;
        else
          echo 'CLANG_TIDY=clang-tidy-14 BUILD_DIR=${{runner.workspace}}/build $GITHUB_WORKSPACE/tools/lint-tidy.sh ${LAST_COMMIT_SHA} || true;'
          CLANG_TIDY=clang-tidy-14 BUILD_DIR=${{runner.workspace}}/build $GITHUB_WORKSPACE/tools/lint-tidy.sh ${LAST_COMMIT_SHA} || true;
        fi      
