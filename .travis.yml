language: cpp
sudo: required
dist: trusty

compiler:
  - gcc
  - clang

before_install:
  - sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y > /dev/null
  - sudo add-apt-repository "deb http://llvm.org/apt/trusty/ llvm-toolchain-trusty-3.8 main" -y > /dev/null
  - wget -O - http://llvm.org/apt/llvm-snapshot.gpg.key|sudo apt-key add - > /dev/null
  - wget -O - http://llvm.org/apt/llvm-snapshot.gpg.key|sudo apt-key add - > /dev/null
  - sudo apt-get update > /dev/null
  - if [ "$CXX" = "g++" ]; then sudo apt-get install g++-5 -y > /dev/null; fi
  - if [ "$CXX" = "g++" ]; then export CXX="g++-5" CC="gcc-5"; fi
  - if [ "$CXX" = "clang++" ]; then sudo apt-get install clang-3.8 --force-yes -y > /dev/null; fi
  - if [ "$CXX" = "clang++" ]; then export CXX="clang++-3.8" CC="clang-3.8"; fi
  - if [ "${TIDY}" = "true" ]; then sudo apt-get install clang-tidy-3.8 clang-format-3.8 clang-3.8 --force-yes -y > /dev/null; fi
  - sudo apt-get install libunwind8-dev libsdl2-dev libboost-locale-dev libboost-filesystem-dev -y > /dev/null
  - ${CXX} --version
  - ${CC} --version
  - mkdir ~/dependency-prefix
  - export PKG_CONFIG_PATH=~/dependency-prefix/lib/pkgconfig
  - wget http://s2.jonnyh.net/pub/cd_minimal.iso.xz -O data/cd.iso.xz
  - xz -d data/cd.iso.xz
# setup some default settings
  - mkdir -p ~/.local/share/OpenApoc
  - echo "Resource.LocalCDPath=${PWD}/data/cd.iso" > ~/.local/share/OpenApoc/settings.cfg
  - echo "Resource.LocalDataDir=${PWD}/data/" >> ~/.local/share/OpenApoc/settings.cfg
  - export LSAN_OPTIONS="exitcode=0"

env:
  - BUILD_TYPE="RelWithDebInfo" TIDY="false" SANITIZE="false"
  - BUILD_TYPE="RelWithDebInfo" TIDY="true" SANITIZE="false"
  - BUILD_TYPE="RelWithDebInfo" TIDY="false" SANITIZE="true"

matrix:
  exclude:
    - compiler: gcc
      env: BUILD_TYPE="RelWithDebInfo" TIDY="true" SANITIZE="false"
    - compiler: gcc
      env: BUILD_TYPE="RelWithDebInfo" TIDY="false" SANITIZE="true"

install:
  - pushd ./dependencies/tinyxml2 && cmake -DCMAKE_INSTALL_PREFIX=~/dependency-prefix . > /dev/null && make -j2 > /dev/null && make install > /dev/null && popd;
  - pushd ./dependencies/glm && cmake -DCMAKE_INSTALL_PREFIX=~/dependency-prefix . > /dev/null && make -j2 > /dev/null && make install > /dev/null && popd;
  - pushd ./dependencies/physfs && cmake -DCMAKE_INSTALL_PREFIX=~/dependency-prefix . > /dev/null && make -j2 > /dev/null && make install > /dev/null && popd;

before_script:
  - export CFLAGS="-Wall -Wextra" CXXFLAGS="-Wall -Wextra"
  - if [ "$SANITIZE" = "true" ]; then export CFLAGS="$CFLAGS -fsanitize=address,undefined" CXXFLAGS="$CXXFLAGS -fsanitize=address,undefined"; fi
  - cmake . -DGLM_INCLUDE_DIR=~/dependency-prefix/include -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DCLANG_TIDY=clang-tidy-3.8 -DCLANG_FORMAT=clang-format-3.8 -DENABLE_TESTS=ON -DCMAKE_C_FLAGS="${CFLAGS}" -DCMAKE_CXX_FLAGS="${CXXFLAGS}"
# Do the format before the script so the output is cleaner - just showing the diff (if any) and the tidy results
  - if [ "${TIDY}" = "true" ]; then make format -j2 > /dev/null; fi
# Start an X server to run tests on
  - "export DISPLAY=:99.0"
  - "sh -e /etc/init.d/xvfb start"
  - sleep 3 # give xvfb some time to start

script:
  - if [ "${TIDY}" = "true" ]; then git --no-pager diff --ignore-submodules --stat && make tidy; fi
  - if [ "${TIDY}" != "true" ]; then make -j2 && ctest -V && ./bin/OpenApoc_DataExtractor && git --no-pager diff --ignore-submodules --stat data/; fi

os:
  - linux

