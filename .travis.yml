language: cpp
sudo: required
dist: trusty

cache: ccache

compiler:
  - gcc
  - clang

os:
  - linux
  - osx

before_install:
  - if [ $TRAVIS_OS_NAME = "linux" ]; then ccache -M 1G; ccache -s; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y > /dev/null; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then sudo add-apt-repository "deb http://llvm.org/apt/trusty/ llvm-toolchain-trusty-3.9 main" -y > /dev/null; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then wget -O - http://llvm.org/apt/llvm-snapshot.gpg.key|sudo apt-key add - > /dev/null; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then sudo apt-get update > /dev/null; fi
  - if [ $TRAVIS_OS_NAME = "linux" -a $CXX = "clang++" -a $BUILD_TYPE != "Sanitize" ]; then export TIDY=true; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then if [ "$CXX" = "g++" ]; then sudo apt-get install g++-5 -y > /dev/null; fi; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then if [ "$CXX" = "g++" ]; then export CXX="ccache g++-5" CC="ccache gcc-5"; fi; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then if [ "$CXX" = "clang++" ]; then sudo apt-get install clang-3.9 --force-yes -y > /dev/null; fi; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then if [ "$CXX" = "clang++" ]; then export CXX="ccache clang++-3.9" CC="ccache clang-3.9"; fi; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then if [ "${TIDY}" = "true" ]; then sudo apt-get install clang-tidy-3.9 clang-format-3.9 clang-3.9 --force-yes -y > /dev/null; fi; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then sudo apt-get install libunwind8-dev libsdl2-dev libboost-locale-dev libboost-filesystem-dev libboost-program-options-dev -y > /dev/null; fi
  - if [ $TRAVIS_OS_NAME = "osx" ]; then brew update && brew install sdl2 xz ; fi
  - ${CXX} --version
  - ${CC} --version
  - mkdir ~/dependency-prefix
  - export PKG_CONFIG_PATH=~/dependency-prefix/lib/pkgconfig
  - wget http://s2.jonnyh.net/pub/cd_minimal.iso.xz -O data/cd.iso.xz
  - xz -d data/cd.iso.xz
# setup some default settings
  - export LSAN_OPTIONS="exitcode=0"
  - export NUM_CORES=$(grep '^processor' /proc/cpuinfo|wc -l)
# Try to ignore hyperthreading
  - export NUM_REAL_CORES=$(grep '^core id' /proc/cpuinfo|sort -u|wc -l)
  - echo "Num cores ${NUM_CORES} Real cores ${NUM_REAL_CORES}"

env:
  - BUILD_TYPE="RelWithDebInfo"
  - BUILD_TYPE="Sanitize"

matrix:
  exclude:
    - compiler: gcc
      env: BUILD_TYPE="Sanitize"
    - os: osx
      env: BUILD_TYPE="Sanitize"

install:
  - pushd ./dependencies/glm && cmake -DCMAKE_INSTALL_PREFIX=~/dependency-prefix . > /dev/null && make -j2 > /dev/null && make install > /dev/null && popd;

before_script:
  - export CFLAGS="-Wall -Wextra" CXXFLAGS="-Wall -Wextra"
  - $(which time) cmake . -DGLM_INCLUDE_DIR=~/dependency-prefix/include -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DCLANG_TIDY=clang-tidy-3.9 -DCLANG_FORMAT=clang-format-3.9 -DENABLE_TESTS=ON -DCMAKE_C_FLAGS="${CFLAGS}" -DCMAKE_CXX_FLAGS="${CXXFLAGS}" -DENABLE_COTIRE=OFF
# Do the format before the script so the output is cleaner - just showing the diff (if any) and the tidy results
  - if [ "${TIDY}" = "true" ]; then make format -j2 > /dev/null; fi
# Start an X server to run tests on
  - if [ $TRAVIS_OS_NAME = "linux" ] ; then export DISPLAY=:99.0 ; fi
  - if [ $TRAVIS_OS_NAME = "linux" ] ; then sh -e /etc/init.d/xvfb start ; fi
# give xvfb some time to start
  - if [ $TRAVIS_OS_NAME = "linux" ] ; then sleep 3 ; fi

script:
# Create the GameState as that triggers the generated source commands
  - $(which time) make -j2 && `which time` ctest -V -j 2 && git --no-pager diff --ignore-submodules --stat
  - if [ "${TIDY}" = "true" ]; then $(which time) make tidy; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then ccache -s; fi
